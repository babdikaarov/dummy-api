import { db } from './database';
import { locations, gates } from './schema';

// Sample location names and addresses
const locationNames = [
  '–¢–æ—Ä–≥–æ–≤–æ-—Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä –ê–ª–∞-–¢–æ–æ',
  '–ì–æ—Å—Ç–∏–Ω–∏—á–Ω–æ-—Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å –ö–æ–Ω—É—Å—Ä',
  '–ê–≤—Ç–æ–ø–∞—Ä–∫ "–ë–∏—à–∫–µ–∫ –ê–≤—Ç–æ"',
  '–û—Ñ–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä "–ú–µ—Ä–∏–±–µ–ª—å"',
  '–ñ–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å "–ë–µ–ª—ã–π –≥–æ—Ä–æ–¥"',
  '–¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä "–î–æ—Ä–¥–æ–π"',
  '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–∞—Ä–∫ "–¢–µ–∫–Ω–æ–ø–∞—Ä–∫"',
  '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å "–î–∏–Ω–∞–º–æ"',
  '–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä "–®–µ–ª–∫–æ–≤—ã–π –ø—É—Ç—å"',
  '–ë–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä "–û—Ä—Ç–æ –°–∞–π"',
  '–ü–∞—Ä–∫–∏–Ω–≥ "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π"',
  '–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞ "–¢–∏–∞–Ω –®–∞–Ω—å"',
  '–ö–µ–º–ø–∏–Ω–≥ "–ì–æ—Ä–Ω–∞—è –±–∞–∑–∞"',
  '–°–∫–ª–∞–¥ –æ–ø—Ç–æ–≤–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ "–ú–µ–≥–∞"',
  '–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å "–ú–∞—Å—Ç–µ—Ä"',
  '–†–µ—Å—Ç–æ—Ä–∞–Ω "–ß–∞–π—Ö–∞–Ω–∞"',
  '–ú–æ—Ä–≥-–¥–æ—Å—Ç–∞–≤–∫–∞ "–î–æ—Å—Ç–∞–≤–ª—è–π"',
  '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ "–ê–±–∞—è –ö—É–Ω–∞–Ω–±–∞–µ–≤–∞"',
  '–ü–∞—Ä–∫ –∫—É–ª—å—Ç—É—Ä—ã –∏–º–µ–Ω–∏ –ü–∞–Ω—Ñ–∏–ª–æ–≤–∞',
  '–ú—É–∑–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –ö–∏—Ä–≥–∏–∑–∏–∏',
];

const addresses = [
  '–≥. –ë–∏—à–∫–µ–∫, –ø—Ä–æ—Å–ø–µ–∫—Ç –ß—É–π, 135',
  '–≥. –ë–∏—à–∫–µ–∫, —É–ª–∏—Ü–∞ –ú–æ—Å–∫–æ–≤—Å–∫–∞—è, 89',
  '–≥. –ë–∏—à–∫–µ–∫, –ø—Ä–æ—Å–ø–µ–∫—Ç –ú–∞–Ω–∞—Å–∞, 56',
  '–≥. –ë–∏—à–∫–µ–∫, —É–ª–∏—Ü–∞ –ö–∏–µ–≤—Å–∫–∞—è, 234',
  '–≥. –ë–∏—à–∫–µ–∫, –ø—Ä–æ—Å–ø–µ–∫—Ç –ü—Ä–∞–≤–æ–±–µ—Ä–µ–∂–Ω—ã–π, 142',
  '–≥. –ë–∏—à–∫–µ–∫, —É–ª–∏—Ü–∞ –õ–µ–Ω–∏–Ω–∞, 78',
  '–≥. –ë–∏—à–∫–µ–∫, —É–ª–∏—Ü–∞ –¢—ã–Ω—Å—Ç–∞–Ω–æ–≤–∞, 45',
  '–≥. –ë–∏—à–∫–µ–∫, —É–ª–∏—Ü–∞ –ó–∞–∫–∞–º–∏–ª—è, 67',
  '–≥. –ë–∏—à–∫–µ–∫, –ø—Ä–æ—Å–ø–µ–∫—Ç –ë—É–ª–≤–∞—Ä, 112',
  '–≥. –ë–∏—à–∫–µ–∫, —É–ª–∏—Ü–∞ –ì–æ–≥–æ–ª—è, 89',
  '–≥. –ë–∏—à–∫–µ–∫, —É–ª–∏—Ü–∞ –û—Å–æ–∫–∏–Ω–∞, 123',
  '–≥. –ë–∏—à–∫–µ–∫, —É–ª–∏—Ü–∞ –°–æ—é–∑–Ω–∞—è, 156',
  '–≥. –ë–∏—à–∫–µ–∫, —É–ª–∏—Ü–∞ –ñ–æ—Ä–∞–µ–≤–∞, 34',
  '–≥. –ë–∏—à–∫–µ–∫, –ø—Ä–æ—Å–ø–µ–∫—Ç –ê–±–¥—Ä–∞—Ö–º–∞–Ω–æ–≤–∞, 78',
  '–≥. –ë–∏—à–∫–µ–∫, —É–ª–∏—Ü–∞ –Æ–Ω—É—Å–∞–ª–∏–µ–≤–∞, 56',
  '–≥. –ë–∏—à–∫–µ–∫, —É–ª–∏—Ü–∞ –ì–∞–Ω–¥–∏, 45',
  '–≥. –ë–∏—à–∫–µ–∫, —É–ª–∏—Ü–∞ –õ–æ–≥–∏–Ω–æ–≤–∞, 23',
  '–≥. –ë–∏—à–∫–µ–∫, —É–ª–∏—Ü–∞ –ë–æ–∫–æ–Ω–±–∞–µ–≤–∞, 89',
  '–≥. –ë–∏—à–∫–µ–∫, —É–ª–∏—Ü–∞ –•–æ–ª–æ–¥–æ–≤–∞, 12',
  '–≥. –ë–∏—à–∫–µ–∫, —É–ª–∏—Ü–∞ –ê–Ω–∫–∞—Ä–∞, 90',
];

const gateDescriptions = [
  'Main vehicle entrance for visitors. Controlled by biometric access, opens in 3 seconds with safety sensors.',
  'Emergency exit gate with manual override. Accessible during non-business hours.',
  'Loading dock gate for delivery vehicles. Restricted access, requires special authorization.',
  'Pedestrian entrance gate. Automatic sliding doors, equipped with proximity sensors.',
  'Service vehicle entrance. Monitored 24/7 by security cameras.',
  'VIP parking entrance. Premium access control with facial recognition.',
  'Secondary exit for personnel. Restricted access with RFID card readers.',
  'Fire escape gate. Emergency exit only, alarmed against unauthorized opening.',
  'Loading/Unloading area. Industrial-grade barrier gate for heavy vehicles.',
  'Temporary access gate. Seasonal entrance, secured with bollards.',
  'Maintenance entrance. Technical staff only, requires keycard activation.',
  'Visitor parking entrance. Ticketed access system with automatic counters.',
];

const gateNames = [
  '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –®–ª–∞–≥–±–∞—É–º ‚Ññ1',
  '–í–æ—Ä–æ—Ç–∞ –≤—Ö–æ–¥–∞ ‚Ññ2',
  '–ë–æ–∫–æ–≤–æ–π –≤—ä–µ–∑–¥ ‚Ññ3',
  '–°–ª—É–∂–µ–±–Ω—ã–π –≤—Ö–æ–¥ ‚Ññ4',
  '–ü–µ—à–µ—Ö–æ–¥–Ω—ã–µ –≤–æ—Ä–æ—Ç–∞ ‚Ññ5',
  '–ê–≤–∞—Ä–∏–π–Ω—ã–π –≤—ã—Ö–æ–¥ ‚Ññ6',
  '–ì—Ä—É–∑–æ–≤–æ–π –≤—ã–µ–∑–¥ ‚Ññ7',
  '–í–æ—Ä–æ—Ç–∞ –ø–∞—Ä–∫–æ–≤–∫–∏ ‚Ññ8',
  '–í—Ö–æ–¥–Ω–∞—è —Å–µ–∫—Ü–∏—è ‚Ññ9',
  '–í—ã–µ–∑–¥–Ω–∞—è —Ä–∞–º–ø–∞ ‚Ññ10',
  '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –ø—É–Ω–∫—Ç ‚Ññ11',
  '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–≤–µ—Ä—å ‚Ññ12',
];

function getRandomItem<T>(array: T[]): T {
  return array[Math.floor(Math.random() * array.length)];
}

function getRandomNumber(min: number, max: number): number {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

async function seed() {
  try {
    console.log('Starting database seed...');

    // Create locations data
    const locationsData = locationNames.map((name, index) => ({
      id: index + 1,
      title: name,
      address: addresses[index],
      logo: `https://picsum.photos/seed/location${index + 1}/200`,
    }));

    // Insert locations
    console.log(`Inserting ${locationsData.length} locations...`);
    await db.insert(locations).values(locationsData).onConflictDoNothing();

    // Create gates data
    const gatesData: (typeof gates.$inferInsert)[] = [];
    let gateId = 1;

    for (const location of locationsData) {
      // Random number of gates per location (1-3)
      const gateCount = getRandomNumber(1, 3);

      for (let i = 0; i < gateCount; i++) {
        gatesData.push({
          id: gateId++,
          title: getRandomItem(gateNames),
          description: getRandomItem(gateDescriptions),
          locationId: location.id,
          isOpen: Math.random() > 0.5,
          gateIsHorizontal: Math.random() > 0.5,
        });
      }
    }

    // Insert gates
    console.log(`Inserting ${gatesData.length} gates...`);
    await db.insert(gates).values(gatesData).onConflictDoNothing();

    console.log('\n‚úÖ Seed completed successfully!');
    console.log(`   üìç Total locations: ${locationsData.length}`);
    console.log(`   üö™ Total gates: ${gatesData.length}`);
    console.log(
      `   üìä Average gates per location: ${(gatesData.length / locationsData.length).toFixed(2)}`,
    );
  } catch (error) {
    console.error('‚ùå Seed failed:', error);
    throw error;
  }
}

seed();
