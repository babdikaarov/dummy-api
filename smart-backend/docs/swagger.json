{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "Secure phone-based authentication backend for Ololo Gate management system with dual authentication (users \u0026 admins) and role-based access control.",
        "title": "Ololo Gate API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "support@ololo-gate.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/": {
            "get": {
                "description": "Check if the API server is running and retrieve detailed health information including status, timestamp, uptime, and environment",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Health check endpoint",
                "responses": {
                    "200": {
                        "description": "Health check successful",
                        "schema": {
                            "$ref": "#/definitions/handlers.HealthCheckResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/admin/audit-logs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve audit logs of admin actions (super admin only). Returns paginated list of all administrative operations.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Audit Logs"
                ],
                "summary": "Get admin audit logs",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by admin ID",
                        "name": "admin_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by action type",
                        "name": "action",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by resource type",
                        "name": "resource_type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Audit logs retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.PaginatedAuditLogResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing admin token",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - super admin access required",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/admin/audit-logs/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a specific audit log entry by ID (super admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Audit Logs"
                ],
                "summary": "Get audit log by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Audit log ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Audit log retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.AuditLogDetailResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing admin token",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - super admin access required",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Audit log not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/admin/login": {
            "post": {
                "description": "Authenticate admin with username and password, returns permanent access token (no expiry)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Authentication"
                ],
                "summary": "Admin login",
                "parameters": [
                    {
                        "description": "Admin credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.AdminLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful with permanent token",
                        "schema": {
                            "$ref": "#/definitions/handlers.AdminLoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing credentials",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/admin/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a list of all admin accounts with pagination, search, filtering, and ordering (super admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin User Management"
                ],
                "summary": "Get all admin users",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Records per page (default: 500)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by username",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by role (super or regular)",
                        "name": "role",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order results by created_at (ASC or DESC, default: DESC)",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Admin users retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.AdminsListResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - super admin access required",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new admin account with specified role (super admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin User Management"
                ],
                "summary": "Create a new admin user",
                "parameters": [
                    {
                        "description": "Admin creation details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateAdminRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Admin user created successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.AdminResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation error",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - super admin access required",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "409": {
                        "description": "Admin with this username already exists",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/admin/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a specific admin's details by ID. Super admins can retrieve any admin. Regular admins can only retrieve their own details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin User Management"
                ],
                "summary": "Get admin by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Admin retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.AdminDetailResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid admin ID format",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - regular admins can only access their own record",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Admin not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete an admin account by ID (soft delete, super admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin User Management"
                ],
                "summary": "Delete an admin user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Admin user deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.AdminResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid admin ID format",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - super admin access required",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Admin not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an admin's details (password, username, and/or role). Super admins can update any admin. Regular admins can only update their own password and username (not role).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin User Management"
                ],
                "summary": "Update admin details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update details (at least one field required)",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateAdminRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Admin updated successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.AdminResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid admin ID or request body",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions for this operation",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Admin not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/check-phone": {
            "get": {
                "description": "Check if a phone number is available for registration or account creation (public endpoint, no authentication required)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Authentication"
                ],
                "summary": "Check if phone number is available for registration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Phone number in E.164 format (e.g., +77771234567)",
                        "name": "phone",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Phone availability check result",
                        "schema": {
                            "$ref": "#/definitions/handlers.PhoneAvailabilityResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid phone number format",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/login": {
            "post": {
                "description": "Authenticate user with phone and password, returns access and refresh tokens. Supports device-based token invalidation.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Authentication"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unique device identifier (optional - if provided and different from current device, previous tokens will be invalidated)",
                        "name": "device_id",
                        "in": "query"
                    },
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful with tokens",
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or phone format",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/refresh": {
            "post": {
                "description": "Exchange a valid refresh token for a new access token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Authentication"
                ],
                "summary": "Refresh access token",
                "parameters": [
                    {
                        "description": "Refresh token",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RefreshRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New access token generated",
                        "schema": {
                            "$ref": "#/definitions/handlers.RefreshResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid or expired refresh token, or token has been invalidated",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/register": {
            "post": {
                "description": "Register a new user account with phone number and password (E.164 format required)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Authentication"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "Registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation error",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "409": {
                        "description": "User with this phone number already exists",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/available-locations": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetch all locations from third-party API without filtering by user (admin access only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Location Management"
                ],
                "summary": "Get all available locations in the system",
                "responses": {
                    "200": {
                        "description": "Available locations retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.AvailableLocationsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - requires admin access",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/contacts": {
            "get": {
                "description": "Retrieve the application's contact information (public endpoint, no authentication required). Returns empty values if contact information has not been set.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contact Information"
                ],
                "summary": "Get contact information",
                "responses": {
                    "200": {
                        "description": "Contact information retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.ContactResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update or create the application's contact information (admin only). Creates a new contact record if one doesn't exist.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contact Information"
                ],
                "summary": "Update contact information",
                "parameters": [
                    {
                        "description": "Contact information to update",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateContactRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contact information updated or created successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.ContactResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation error",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing admin token",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - admin access required",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/locations": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetch all locations from third-party API based on user's phone with their gates",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Gate Management"
                ],
                "summary": "Get all locations accessible to the current user",
                "responses": {
                    "200": {
                        "description": "Locations retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.LocationsListResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/locations/{gateId}/close": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Send command to close a specific gate to third-party API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Gate Management"
                ],
                "summary": "Close a gate",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Gate ID",
                        "name": "gateId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Gate operation response",
                        "schema": {
                            "$ref": "#/definitions/handlers.GateActionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid gate ID",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/locations/{gateId}/open": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Send command to open a specific gate to third-party API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Gate Management"
                ],
                "summary": "Open a gate",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Gate ID",
                        "name": "gateId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Gate operation response",
                        "schema": {
                            "$ref": "#/definitions/handlers.GateActionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid gate ID",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/locations/{locationId}/gates": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetch all gates accessible to the current user for a specific location from third-party API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Gate Management"
                ],
                "summary": "Get all gates for a specific location",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Location ID",
                        "name": "locationId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Gates retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.GatesListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid location ID",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a list of all registered users with pagination and search (requires admin authentication)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Management"
                ],
                "summary": "Get all users",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Records per page (default: 500)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by phone number",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order results by created_at (ASC or DESC, default: DESC)",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Users retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.UsersListResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing admin token",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new user account and assign locations and gates via third-party API (requires admin authentication)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Management"
                ],
                "summary": "Create a new user with location and gate assignment",
                "parameters": [
                    {
                        "description": "User creation details with locations and gates",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation error",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing admin token",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "409": {
                        "description": "User with this phone number already exists",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or third-party API failure",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a specific user's details by ID including their assigned locations and gates from third-party API (requires admin authentication)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Management"
                ],
                "summary": "Get user by ID with assigned locations and gates",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User retrieved successfully with locations",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserDetailResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID format",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing admin token",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a user account by ID (soft delete, requires admin authentication)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Management"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID format",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing admin token",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a user's password (optional) and reassign locations and gates via third-party API (requires admin authentication)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Management"
                ],
                "summary": "Update user password and location/gate assignments",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update details (password optional, locations and gates required)",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID or request body",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing admin token",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or third-party API failure",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.APIResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "handlers.AdminDTO": {
            "type": "object",
            "required": [
                "created_at",
                "id",
                "role",
                "updated_at",
                "username"
            ],
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2025-01-15T10:30:00Z"
                },
                "id": {
                    "type": "string",
                    "example": "00000000-0000-0000-0000-000000000001"
                },
                "role": {
                    "type": "string",
                    "example": "super"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2025-01-15T10:30:00Z"
                },
                "username": {
                    "type": "string",
                    "example": "admin"
                }
            }
        },
        "handlers.AdminData": {
            "type": "object",
            "required": [
                "id",
                "role",
                "username"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440001"
                },
                "role": {
                    "type": "string",
                    "example": "regular"
                },
                "username": {
                    "type": "string",
                    "example": "newadmin"
                }
            }
        },
        "handlers.AdminDetailData": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2025-01-15T10:30:00Z"
                },
                "id": {
                    "type": "string",
                    "example": "00000000-0000-0000-0000-000000000001"
                },
                "role": {
                    "type": "string",
                    "example": "super"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2025-01-15T10:30:00Z"
                },
                "username": {
                    "type": "string",
                    "example": "admin"
                }
            }
        },
        "handlers.AdminDetailResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/handlers.AdminDetailData"
                },
                "message": {
                    "type": "string",
                    "example": "Admin retrieved successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "handlers.AdminLoginData": {
            "type": "object",
            "required": [
                "access_token",
                "id",
                "role",
                "username"
            ],
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "id": {
                    "type": "string",
                    "example": "00000000-0000-0000-0000-000000000001"
                },
                "role": {
                    "type": "string",
                    "example": "super"
                },
                "username": {
                    "type": "string",
                    "example": "admin"
                }
            }
        },
        "handlers.AdminLoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "example": "admin"
                },
                "username": {
                    "type": "string",
                    "example": "admin"
                }
            }
        },
        "handlers.AdminLoginResponse": {
            "type": "object",
            "required": [
                "message",
                "success"
            ],
            "properties": {
                "data": {
                    "$ref": "#/definitions/handlers.AdminLoginData"
                },
                "message": {
                    "type": "string",
                    "example": "Login successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "handlers.AdminResponse": {
            "type": "object",
            "required": [
                "message",
                "success"
            ],
            "properties": {
                "data": {
                    "$ref": "#/definitions/handlers.AdminData"
                },
                "message": {
                    "type": "string",
                    "example": "Admin created successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "handlers.AdminsListResponse": {
            "type": "object",
            "required": [
                "message",
                "success"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.AdminDTO"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Admins retrieved successfully"
                },
                "pagination": {
                    "$ref": "#/definitions/handlers.PaginationMeta"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "handlers.AuditLogDetailResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.AdminAuditLog"
                },
                "message": {
                    "type": "string",
                    "example": "Audit log retrieved successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "handlers.AvailableLocationsResponse": {
            "type": "object",
            "required": [
                "message",
                "success"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.LocationDTO"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Available locations retrieved successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "handlers.ContactDTO": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "example": "г. Бишкек, проспект Чуй, 135"
                },
                "email_support": {
                    "type": "string",
                    "example": "support@ololo.com"
                },
                "support_number": {
                    "type": "integer",
                    "example": 77091234567
                }
            }
        },
        "handlers.ContactResponse": {
            "type": "object",
            "required": [
                "message",
                "success"
            ],
            "properties": {
                "data": {
                    "$ref": "#/definitions/handlers.ContactDTO"
                },
                "message": {
                    "type": "string",
                    "example": "Contact information retrieved successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "handlers.CreateAdminRequest": {
            "type": "object",
            "required": [
                "password",
                "role",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "minLength": 6,
                    "example": "password123"
                },
                "role": {
                    "description": "\"super\" or \"regular\"",
                    "type": "string",
                    "example": "regular"
                },
                "username": {
                    "type": "string",
                    "example": "newadmin"
                }
            }
        },
        "handlers.CreateUserRequest": {
            "type": "object",
            "required": [
                "password",
                "phone"
            ],
            "properties": {
                "locations": {
                    "description": "Optional - if provided, will assign user to these locations and gates",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.LocationAssignmentRequest"
                    }
                },
                "password": {
                    "type": "string",
                    "minLength": 6,
                    "example": "password123"
                },
                "phone": {
                    "type": "string",
                    "example": "+77771234567"
                }
            }
        },
        "handlers.GateActionData": {
            "type": "object",
            "properties": {
                "gate_id": {
                    "type": "integer",
                    "example": 1
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "handlers.GateActionResponse": {
            "type": "object",
            "required": [
                "message",
                "success"
            ],
            "properties": {
                "data": {
                    "$ref": "#/definitions/handlers.GateActionData"
                },
                "message": {
                    "type": "string",
                    "example": "Gate operation completed successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "handlers.GateDTO": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Main vehicle entrance for visitors. Controlled by biometric access, opens in 3 seconds with safety sensors."
                },
                "gate_is_horizontal": {
                    "type": "boolean",
                    "example": true
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "is_open": {
                    "type": "boolean",
                    "example": true
                },
                "location_id": {
                    "type": "integer",
                    "example": 1
                },
                "title": {
                    "type": "string",
                    "example": "Автоматический Шлагбаум №12"
                }
            }
        },
        "handlers.GatesListResponse": {
            "type": "object",
            "required": [
                "message",
                "success"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.GateDTO"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Gates retrieved successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "handlers.HealthCheckResponse": {
            "type": "object",
            "required": [
                "environment",
                "message",
                "status",
                "success",
                "timestamp",
                "uptime",
                "version"
            ],
            "properties": {
                "environment": {
                    "type": "string",
                    "example": "production"
                },
                "message": {
                    "type": "string",
                    "example": "Ololo Gate API is running"
                },
                "status": {
                    "type": "string",
                    "example": "healthy"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "timestamp": {
                    "type": "string",
                    "example": "2025-01-15T10:30:45Z"
                },
                "uptime": {
                    "type": "string",
                    "example": "1h30m45s"
                },
                "version": {
                    "type": "string",
                    "example": "1.0.0"
                }
            }
        },
        "handlers.LocationAssignmentRequest": {
            "type": "object",
            "required": [
                "gateIds",
                "locationId"
            ],
            "properties": {
                "gateIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "locationId": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "handlers.LocationDTO": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "example": "г. Бишкек, проспект Чуй, 135"
                },
                "gates": {
                    "description": "Always include gates, even if empty array",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.GateDTO"
                    }
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "logo": {
                    "type": "string",
                    "example": "https://picsum.photos/seed/alatoo/200"
                },
                "title": {
                    "type": "string",
                    "example": "Торгово-развлекательный центр Ала-Тоо"
                }
            }
        },
        "handlers.LocationsListResponse": {
            "type": "object",
            "required": [
                "message",
                "success"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.LocationDTO"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Locations retrieved successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "handlers.LoginData": {
            "type": "object",
            "required": [
                "access_expires_in",
                "access_token",
                "id",
                "phone",
                "refresh_expires_in",
                "refresh_token"
            ],
            "properties": {
                "access_expires_in": {
                    "type": "integer",
                    "example": 900
                },
                "access_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "phone": {
                    "type": "string",
                    "example": "+77771234567"
                },
                "refresh_expires_in": {
                    "type": "integer",
                    "example": 2592000
                },
                "refresh_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "handlers.LoginRequest": {
            "type": "object",
            "required": [
                "password",
                "phone"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "example": "password123"
                },
                "phone": {
                    "type": "string",
                    "example": "+77771234567"
                }
            }
        },
        "handlers.LoginResponse": {
            "type": "object",
            "required": [
                "message",
                "success"
            ],
            "properties": {
                "data": {
                    "$ref": "#/definitions/handlers.LoginData"
                },
                "message": {
                    "type": "string",
                    "example": "Login successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "handlers.PaginatedAuditLogResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.AdminAuditLog"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Audit logs retrieved successfully"
                },
                "pagination": {
                    "$ref": "#/definitions/handlers.PaginationMeta"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "handlers.PaginationMeta": {
            "type": "object",
            "properties": {
                "current_page": {
                    "type": "integer",
                    "example": 1
                },
                "last_page": {
                    "type": "integer",
                    "example": 1
                },
                "per_page": {
                    "type": "integer",
                    "example": 100
                },
                "total": {
                    "type": "integer",
                    "example": 100
                }
            }
        },
        "handlers.PhoneAvailabilityResponse": {
            "type": "object",
            "required": [
                "available",
                "message",
                "success"
            ],
            "properties": {
                "available": {
                    "description": "true if phone is available, false if already in use",
                    "type": "boolean",
                    "example": true
                },
                "message": {
                    "type": "string",
                    "example": "Phone availability checked"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "handlers.RefreshData": {
            "type": "object",
            "required": [
                "access_token"
            ],
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "handlers.RefreshRequest": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "handlers.RefreshResponse": {
            "type": "object",
            "required": [
                "message",
                "success"
            ],
            "properties": {
                "data": {
                    "$ref": "#/definitions/handlers.RefreshData"
                },
                "message": {
                    "type": "string",
                    "example": "Token refreshed successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "handlers.RegisterData": {
            "type": "object",
            "required": [
                "id",
                "phone"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "phone": {
                    "type": "string",
                    "example": "+77771234567"
                }
            }
        },
        "handlers.RegisterRequest": {
            "type": "object",
            "required": [
                "password",
                "phone"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "minLength": 6,
                    "example": "password123"
                },
                "phone": {
                    "type": "string",
                    "example": "+77771234567"
                }
            }
        },
        "handlers.RegisterResponse": {
            "type": "object",
            "required": [
                "message",
                "success"
            ],
            "properties": {
                "data": {
                    "$ref": "#/definitions/handlers.RegisterData"
                },
                "message": {
                    "type": "string",
                    "example": "User registered successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "handlers.UpdateAdminRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "minLength": 6,
                    "example": "newpassword123"
                },
                "role": {
                    "type": "string",
                    "example": "regular"
                },
                "username": {
                    "type": "string",
                    "example": "newusername"
                }
            }
        },
        "handlers.UpdateContactRequest": {
            "type": "object",
            "required": [
                "address",
                "email_support",
                "support_number"
            ],
            "properties": {
                "address": {
                    "type": "string",
                    "example": "г. Бишкек, проспект Чуй, 135"
                },
                "email_support": {
                    "type": "string",
                    "example": "support@ololo.com"
                },
                "support_number": {
                    "type": "integer",
                    "example": 77091234567
                }
            }
        },
        "handlers.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "locations": {
                    "description": "Optional - if provided, will reassign user to these locations and gates",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.LocationAssignmentRequest"
                    }
                },
                "password": {
                    "description": "Optional - only updates if provided",
                    "type": "string",
                    "minLength": 6,
                    "example": "newpassword123"
                },
                "phone": {
                    "description": "Optional - if provided, will update phone number after checking availability",
                    "type": "string",
                    "example": "+77771234567"
                }
            }
        },
        "handlers.UserDTO": {
            "type": "object",
            "required": [
                "created_at",
                "id",
                "phone",
                "updated_at"
            ],
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2025-01-15T10:30:00Z"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "phone": {
                    "type": "string",
                    "example": "+77771234567"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2025-01-15T10:30:00Z"
                }
            }
        },
        "handlers.UserData": {
            "type": "object",
            "required": [
                "id",
                "phone"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "phone": {
                    "type": "string",
                    "example": "+77771234567"
                }
            }
        },
        "handlers.UserDetailDTO": {
            "type": "object",
            "required": [
                "created_at",
                "id",
                "locations",
                "phone",
                "updated_at"
            ],
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2025-01-15T10:30:00Z"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.LocationDTO"
                    }
                },
                "phone": {
                    "type": "string",
                    "example": "+77771234567"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2025-01-15T10:30:00Z"
                }
            }
        },
        "handlers.UserDetailResponse": {
            "type": "object",
            "required": [
                "message",
                "success"
            ],
            "properties": {
                "data": {
                    "$ref": "#/definitions/handlers.UserDetailDTO"
                },
                "message": {
                    "type": "string",
                    "example": "User retrieved successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "handlers.UserResponse": {
            "type": "object",
            "required": [
                "message",
                "success"
            ],
            "properties": {
                "data": {
                    "$ref": "#/definitions/handlers.UserData"
                },
                "message": {
                    "type": "string",
                    "example": "User created successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "handlers.UsersListResponse": {
            "type": "object",
            "required": [
                "message",
                "success"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.UserDTO"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Users retrieved successfully"
                },
                "pagination": {
                    "$ref": "#/definitions/handlers.PaginationMeta"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "models.AdminAuditLog": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "\"create_user\", \"update_user\", \"delete_user\", \"create_admin\", \"delete_admin\", \"update_contact\", etc.",
                    "type": "string"
                },
                "admin_id": {
                    "description": "Who performed the action",
                    "type": "string"
                },
                "admin_name": {
                    "description": "Admin username for quick access (denormalized)",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "details": {
                    "description": "JSON with request details (what was changed)",
                    "type": "string"
                },
                "error_message": {
                    "description": "Error message if failed",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ip_address": {
                    "description": "Request IP address",
                    "type": "string"
                },
                "resource_id": {
                    "description": "UUID or ID of affected resource",
                    "type": "string"
                },
                "resource_type": {
                    "description": "\"user\", \"admin\", \"contact\", etc.",
                    "type": "string"
                },
                "status": {
                    "description": "\"success\" or \"failed\"",
                    "type": "string"
                },
                "user_agent": {
                    "description": "Request user agent",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}